#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

compile '*' do
  if (item[:extension] == 'css') || (item[:extension] == 'min.css')
    # don’t filter stylesheets
    filter :relativize_paths, :type => :css
  elsif (item[:extension] == 'js') || (item[:extension] == 'min.js')
    # don’t filter binary items
  elsif item.binary?
    # don’t filter binary items
  elsif (item[:extension] == 'md')
    filter :erb
    filter :redcarpet
    layout item[:layout] || 'default'
    filter :relativize_paths, :type => :html
  else
    filter :erb
    layout item[:layout] || 'default'
    filter :relativize_paths, :type => :html
  end
end

route '*' do
  if (item[:extension] == 'css') || (item[:extension] == 'min.css')
    # Write item with identifier /foo/ to /foo.css
    '/assets' + item.identifier.chop  + '.' + item[:extension]
  elsif (item[:extension] == 'js') || (item[:extension] == 'min.js')
    # Write item with identifier /foo/ to /foo.css
    '/assets' + item.identifier.chop  + '.' + item[:extension]
  elsif item.binary?
    # Write item with identifier /foo/ to /foo.ext
    '/assets' + item.identifier.chop + '.' + item[:extension]
  elsif item.identifier == "/"
    item.identifier + "index.html"
  else
    # Write item with identifier /foo/ to /foo.html
    item.identifier.chop + '.html'
  end
end

layout '*', :erb
